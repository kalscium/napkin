===============================
=         NAPKIN SPEC         =
===============================

=== IDEAS ===
* text files only
* usage of temporary text files with `$EDITOR` instead of stdin
* usage of either yaml or another light-weight configuration language
  for meta-data storage
* simple, reliable, database-less storage with human-readable storage
* exporting to either directories of each version or the last version
* only one text file per 'napkin' as any more files would warrant the
  usage of
  a git repo
* lock files are created during the modification of an important file
* dead-simple data viewing and editing through the opening of the
  configuration yml files
* dead-simple backups (through tarballs) and loads from backups simply
  copy and combine yml files
* a `trim` command that would delete all files in the napkin home
  directory that aren't referenced in any of the configuration files
* a `dump: true` option after the saving of a napkin to choose to keep
  or discard any changes
* A temporary directory in which changes to configuration files (
  through copying them first) which can be written only if the `dump`
  option is set to false.
* changes to napkin contents are automatically saved (as a side-effect)
  as they operate directly in the napkin's directory (no clashes due to
  the uid system) and can only be discarded by the `clear` operation in
  which unlinked files are discarded.
* napkins and napkin contents would be removed by simply unlinking them
  in the yaml files
* if the user's modifications to a yaml file are invalid, then simply
  force the user to re-open and edit the file, but this time, with
  error comments in the yaml on the line in which they occur denoted
  with the prefix "## ERROR: "
* use simple names as ids instead of timestamps

=== CLI ===
options:
	* `-V`: returns the version
commands:
	list                      : lists the napkins in a pretty way

	clean                     : removes files from the napkin home that aren't
								referenced (locks too)

	context                   : opens and edits the context file

	new <uid> <fext>          : creates a new napkin through creating a napkin
								dir, editing the contents of the napkin with
								the specified file extension and writing it to
								the napkin directory, before creating a new
								napkin meta.yml, if it doesn't get dumped, it
								updates the context.yml

	meta <uid>                : edits the meta-data of a pre-existing napkin

	latest <uid>              : prints the latest version/edit of of a napkin

	edit <uid>                : edits the contents of a pre-existing napkin
								through first generating a new uid, writing the
								contents into the napkin directory, then
								updating the meta.yml (with the option to
								dump), where if it is, then the changes to the
								meta.yml are removed but not the contents as
								they are now unlinked and would be cleaned up
								by the next `trim` invocation

	backup -u <uids> -o <path>: exports the napkins of the specified uids (all
								if none are provided) as a tarball by simply
								just copying the napkin's subdirectory into the
								tarball at the specified path and producing a
								reduced context.yml

	export -u <uids> -o <path>: exports the napkins of the specified uids (all
								if none are provided) as text files of the
								final (latest iteration) of the napkin in the
								specified output directory path with the
								file-names specified in the napkin's metadata

	import <path> -b          : blindly imports the napkins stored within a
								specified tarball through copying the contents
								and combining any yml files or replacing other
								content files, favouring the original's or the
								backup's version in case of conflicts depending
								on the 'b' flag

=== HOME DIRECTORY STRUCTURE ===
* `-` denotes a new file or directory
* `(?)` denotes a file/dir that's optional
* `(*)` denotes a file/dir where none or multiple are allowed
* context is separated by a `|`

- ~/.napkin             | ( ) home directory
	- context.lock      | (?) lock to prevent corruption of context.yml
	- context.yml       | ( ) context file that contains the version and uids
	- napkins           | ( ) a directory that holds all the napkins
		- foo           | (+) fs-valid uid & name of the napkin
			- meta.lock | (?) lock to prevent corruption of meta.yml
			- meta.yml  | ( ) metadata for file contents
			- 0000.txt  | (+) file contents with UNIX time uid
	- tmp               | ( ) a temporary dir for any yml changes (randomised
							  ids with specified extensions)

=== CONTEXT.YML ===
The `context.yml` file contains the version (for backwards and forwards
compatibility) and also a list of all the napkins' uids.

example `context.yml`:
	---
	version: 0.0.0
	napkins:
		- example,
		- foo-bar,
	...

=== META.YML ===
The `meta.yml` file contains the uid, description and
creation-date of a napkin. A history of all the content's uids, and
their corresponding date (for version control), and file extensions is
also included.

example `meta.yml`:
	---
	uid: example
	fext: foo
	description: an example napkin
	creation-iso8601: 0000-00-00T00:00:00Z
	history:
		0000:
			fext: foo
			iso8601: 0000-00-00T00:00:00Z
	...
